{"version":3,"sources":["Components/Output.js","Components/Controls/Select.js","Components/Controls/Text.js","App.js","serviceWorker.js","index.js"],"names":["Output","react_default","a","createElement","className","this","props","value","Component","Select","state","_this","onChange","e","setState","target","Text","type","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","showHtml","x","format","textGenerator","changeParamHandler","number","paras","text","_this2","axios","get","then","response","data","console","log","catch","err","Controls_Text","html","Controls_Select","Components_Output","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+QAOeA,mLAJX,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeC,KAAKC,MAAMC,cAF/BC,aCuBNC,oNAtBbC,MAAQ,CACNH,MAAOI,EAAKL,MAAMC,SAGpBK,SAAW,SAAAC,GACTF,EAAKG,SAAS,CAAEP,MAAOM,EAAEE,OAAOR,QAEhCI,EAAKL,MAAMM,SAASD,EAAKD,MAAMH,gFAI/B,OACEN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeQ,SAAUP,KAAKO,UAC9CX,EAAAC,EAAAC,cAAA,UAAQI,MAAM,QAAd,OACAN,EAAAC,EAAAC,cAAA,UAAQI,MAAM,QAAd,eAhBWC,cCyBNQ,6MAxBbN,MAAQ,CACNH,MAAOI,EAAKL,MAAMC,SAGpBK,SAAW,SAAAC,GACTF,EAAKG,SAAS,CAAEP,MAAOM,EAAEE,OAAOR,OAAS,WACvCI,EAAKL,MAAMM,SAASD,EAAKD,MAAMH,kFAKjC,OACEN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACEc,KAAK,SACLb,UAAU,eACVG,MAAOF,KAAKK,MAAMH,MAClBK,SAAUP,KAAKO,mBAlBNJ,aC+EJU,cAvEb,SAAAA,EAAYZ,GAAO,IAAAK,EAAA,OAAAQ,OAAAC,EAAA,EAAAD,CAAAd,KAAAa,IACjBP,EAAAQ,OAAAE,EAAA,EAAAF,CAAAd,KAAAc,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAlB,KAAMC,KAoCRkB,SAAW,SAAAC,GACTd,EAAKG,SAAS,CAAEY,OAAQD,GAAK,WAC3Bd,EAAKgB,mBAvCUhB,EA2CnBiB,mBAAqB,SAAAC,GACnBlB,EAAKG,SAAS,CAAEgB,MAAOD,GAAU,WAC/BlB,EAAKgB,mBA3CPhB,EAAKD,MAAQ,CACXoB,MAAO,EACPJ,OAAQ,OACRK,KAAM,IALSpB,oFAUjBN,KAAKsB,wDAGS,IAAAK,EAAA3B,KAQd4B,IACGC,IACC,mDACE7B,KAAKK,MAAMoB,MACX,8BACAzB,KAAKK,MAAMgB,QAEdS,KAAK,SAAAC,GACJJ,EAAKlB,SAAS,CAAEiB,KAAMK,EAASC,OAC/BC,QAAQC,IAAIH,KAEbI,MAAM,SAAAC,GACLH,QAAQC,IAAIE,sCAgBhB,OACExC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yBAAd,kBACAH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAACuC,EAAD,CAAMnC,MAAOF,KAAKK,MAAMoB,MAAOlB,SAAUP,KAAKuB,sBAEhD3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,gCACCE,KAAKK,MAAMiC,KACZ1C,EAAAC,EAAAC,cAACyC,EAAD,CAAQrC,MAAOF,KAAKK,MAAMiC,KAAM/B,SAAUP,KAAKmB,aAGnDvB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WAfF,IAeSF,EAAAC,EAAAC,cAAC0C,EAAD,CAAQtC,MAAOF,KAAKK,MAAMqB,eAlEvBvB,aCIEsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.fc27dcd2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nclass Output extends Component {\r\n  render() {\r\n    return <div className=\"well output\">{this.props.value}</div>;\r\n  }\r\n}\r\n\r\nexport default Output;\r\n","import React, { Component } from \"react\";\r\nclass Select extends Component {\r\n  state = {\r\n    value: this.props.value\r\n  };\r\n\r\n  onChange = e => {\r\n    this.setState({ value: e.target.value });\r\n    // Passing values up to he parent component\r\n    this.props.onChange(this.state.value);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <select className=\"form-control\" onChange={this.onChange}>\r\n          <option value=\"html\">Yes</option>\r\n          <option value=\"text\">No</option>\r\n        </select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Select;\r\n","import React, { Component } from \"react\";\r\nclass Text extends Component {\r\n  state = {\r\n    value: this.props.value\r\n  };\r\n\r\n  onChange = e => {\r\n    this.setState({ value: e.target.value }, () => {\r\n      this.props.onChange(this.state.value);\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input\r\n          type=\"number\"\r\n          className=\"form-control\"\r\n          value={this.state.value}\r\n          onChange={this.onChange}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Text;\r\n","/* eslint-disable no-unused-expressions */\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Output from \"./Components/Output.js\";\nimport \"./App.css\";\nimport Select from \"./Components/Controls/Select\";\nimport Text from \"./Components/Controls/Text\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      paras: 2,\n      format: \"html\",\n      text: \"\"\n    };\n  }\n\n  componentWillMount() {\n    this.textGenerator();\n  }\n\n  textGenerator() {\n    // axios\n    //   .get(\n    //     \"http://hipsterjesus.com/api/?paras=\" +\n    //       this.state.paras +\n    //       \"&html=\" +\n    //       this.state.html\n    //   )\n    axios\n      .get(\n        \"https://baconipsum.com/api/?type=all-meat&paras=\" +\n          this.state.paras +\n          \"&start-with-lorem=1&format=\" +\n          this.state.format\n      )\n      .then(response => {\n        this.setState({ text: response.data });\n        console.log(response);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }\n\n  showHtml = x => {\n    this.setState({ format: x }, () => {\n      this.textGenerator();\n    });\n  };\n\n  changeParamHandler = number => {\n    this.setState({ paras: number }, () => {\n      this.textGenerator();\n    });\n  };\n  render() {\n    return (\n      <div className=\"App container\">\n        <h1 className=\"text-center display-3\">Text Generator</h1>\n        <hr />\n        <form className=\"form-inline\">\n          <div className=\"form-group\">\n            <label>Paragraphs : </label>\n            <Text value={this.state.paras} onChange={this.changeParamHandler} />\n          </div>\n          <div className=\"form-group\">\n            <label>Include HTML : </label>\n            {this.state.html}\n            <Select value={this.state.html} onChange={this.showHtml} />\n          </div>\n        </form>\n        <br />\n        <br /> <Output value={this.state.text} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}